{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * 通用校验模块，可自行扩展\r\n */\r\n\r\n// 内置默认规则，每一个规则包含 name 和 validate function\r\nconst registeredRules = {\r\n    required: (val) => {\r\n        return typeof val !== 'undefined' &&\r\n            val !== '' &&\r\n            val !== null\r\n    },\r\n    maxlength: (val, max) => {\r\n        return !val || val.length <= max\r\n    },\r\n    minlength: (val, min) => {\r\n        return val && val.length >= min\r\n    }\r\n}\r\n\r\n/**\r\n * 新增校验规则\r\n * @param  {Object | Array} rule 规则（可以使用数组传多个）\r\n * @example\r\n *     <caption>rule definition</caption>\r\n *     {\r\n *         name: 'test',\r\n *         validate: (val) => {\r\n *             return val === 'test'\r\n *         }\r\n *     }\r\n * @return {[type]}      [description]\r\n */\r\nconst register = (rule) => {\r\n    if (!rule || (typeof rule !== 'object')) {\r\n        console.error('register rule failed: must be an object or an array')\r\n        return false\r\n    }\r\n\r\n    if (Array.isArray(rule)) {\r\n        let success = true\r\n        rule.forEach(item => {\r\n            if (!register(item)) {\r\n                success = false\r\n            }\r\n        })\r\n\r\n        return success\r\n    }\r\n\r\n    let name = rule.name\r\n    if (!name) {\r\n        console.error('register rule failed: no name specified')\r\n        return false\r\n    }\r\n\r\n    if (registeredRules[name]) {\r\n        console.error('register rule failed: duplicate name')\r\n        return false\r\n    }\r\n\r\n    let valid = rule.validate\r\n    if (!valid || typeof valid !== 'function') {\r\n        console.error('register rule failed: no validate function specified')\r\n        return false\r\n    }\r\n\r\n    registeredRules[name] = valid\r\n    return true\r\n}\r\n\r\n/**\r\n * 执行校验\r\n * @param  {Object} obj  需要校验的对象\r\n * @param  {String} name 需要校验的字段\r\n * @param  {String | Function} ruleDef 需要校验的规则\r\n * @return {Object}      校验结果，通过返回 null，失败返回错误信息\r\n */\r\nconst validateRule = (obj, name, ruleDef) => {\r\n    let val = obj[name] // 若为 undefined 依然使用规则进行处理\r\n    let {rule, errorMsg, params} = ruleDef\r\n    let validFunc = rule\r\n\r\n    if (typeof validFunc === 'string') {\r\n        validFunc = registeredRules[rule]\r\n        if (!validFunc) { // 未定义的规则\r\n            return {\r\n                name,\r\n                message: '无此校验规则:' + validFunc\r\n            }\r\n        }\r\n    }\r\n\r\n    const args = [val]\r\n    if (typeof params !== 'undefined') {\r\n        if (Array.isArray(params)) {\r\n            args.push.apply(args, params)\r\n        } else {\r\n            args.push(params)\r\n        }\r\n    }\r\n\r\n    const valid = validFunc.apply(obj, args)\r\n    return valid ? null : {\r\n        name,\r\n        message: errorMsg\r\n    }\r\n}\r\n\r\n/**\r\n * 校验函数，暂不支持异步校验\r\n * @param  {Object} obj   待校验对象，为键值对如：{name: '11', age: '-1'}\r\n * @param  {Object} rules 校验规则支持默认规则和自定义规则（一个或多个）\r\n * @example\r\n *     <caption>Rules definition</caption>\r\n *     const rules = {\r\n *         name: {\r\n *             rule: 'required',\r\n *             errorMsg: '姓名必须填写'\r\n *         }, // 默认规则\r\n *         age: [{\r\n *             rule: 'max',\r\n *             params: 18, // 根据规则定义可传入参数\r\n *             errorMsg: '年龄必须小于 18'\r\n *         }, {\r\n *             rule: 'min',\r\n *             params: 0, // 根据规则定义可传入参数\r\n *             errorMsg: '年龄必须大于 0'\r\n *         }],\r\n *         time: [{\r\n *             rule: 'required',\r\n *             errorMsg: '时间必须填写'\r\n *         }, {\r\n *             rule: val => { // 自定义规则\r\n *                 return val > 0 && val < 18\r\n *             },\r\n *             errorMsg: '年龄必须在 0 到 18 之间'\r\n *         }]\r\n *     }\r\n *\r\n *     validate({name: '', age: 19}) === false // all rules validate failed\r\n *\r\n * @return {Object}       是否通过校验 {success: true} / {success: false, errors: [...]}\r\n */\r\nconst validate = (obj, rules) => {\r\n    if (!obj || !rules) { // 无参数或规则，直接返回失败\r\n        return {success: false, errors: ['校验缺少参数']}\r\n    }\r\n\r\n    const errors = []\r\n\r\n    Object.keys(rules).forEach(key => {\r\n        const ruleSet = rules[key]\r\n\r\n        if (Array.isArray(ruleSet)) {\r\n            ruleSet.forEach(rule => {\r\n                let ret = validateRule(obj, key, rule)\r\n                if (ret) { // 返回错误信息\r\n                    errors.push(ret)\r\n                }\r\n            })\r\n        } else {\r\n            let ret = validateRule(obj, key, ruleSet)\r\n            if (ret) { // 返回错误信息\r\n                errors.push(ret)\r\n            }\r\n        }\r\n    })\r\n\r\n    let success = errors.length === 0\r\n    return {\r\n        success,\r\n        errors\r\n    }\r\n}\r\n\r\nexport default {\r\n    validate,\r\n    register\r\n}\r\n"],"names":["registeredRules","val","max","length","min","validateRule","obj","name","ruleDef","rule","errorMsg","params","validFunc","args","Array","isArray","push","apply","rules","success","errors","keys","forEach","ruleSet","key","ret","register","error","item","valid","validate"],"mappings":"qYAKMA,u6BACQ,SAACC,eACe,IAARA,GACF,KAARA,GACQ,OAARA,aAEG,SAACA,EAAKC,UACLD,GAAOA,EAAIE,QAAUD,aAEtB,SAACD,EAAKG,UACNH,GAAOA,EAAIE,QAAUC,KA8D9BC,EAAe,SAACC,EAAKC,EAAMC,OACzBP,EAAMK,EAAIC,GACTE,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,OACjBC,EAAYH,KAES,iBAAdG,OACKZ,EAAgBS,0BAIX,UAAYG,OAK3BC,GAAQZ,eACQ,IAAXU,IACHG,MAAMC,QAAQJ,KACTK,KAAKC,MAAMJ,EAAMF,KAEjBK,KAAKL,IAIJC,EAAUK,MAAMX,EAAKO,GACpB,qBAEFH,oBAuCA,SAACJ,EAAKY,OACdZ,IAAQY,SACDC,SAAS,EAAOC,QAAS,eAG/BA,mBAECC,KAAKH,GAAOI,QAAQ,gBACjBC,EAAUL,EAAMM,MAElBV,MAAMC,QAAQQ,KACND,QAAQ,gBACRG,EAAMpB,EAAaC,EAAKkB,EAAKf,GAC7BgB,KACOT,KAAKS,SAGjB,KACCA,EAAMpB,EAAaC,EAAKkB,EAAKD,GAC7BE,KACOT,KAAKS,eAKQ,IAAlBL,EAAOjB,2BAxIR,SAAXuB,EAAYjB,OACTA,GAAyB,qBAATA,gBAAAA,mBACTkB,MAAM,wDACP,KAGPb,MAAMC,QAAQN,GAAO,KACjBU,GAAU,WACTG,QAAQ,YACJI,EAASE,QACA,KAIXT,MAGPZ,EAAOE,EAAKF,SACXA,iBACOoB,MAAM,4CACP,KAGP3B,EAAgBO,kBACRoB,MAAM,yCACP,MAGPE,EAAQpB,EAAKqB,gBACZD,GAA0B,mBAAVA,KAKLtB,GAAQsB,GACjB,YALKF,MAAM,yDACP"}